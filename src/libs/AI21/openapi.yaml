openapi: 3.0.1
info:
  title: AI21 Studio API
  description: Access our powerful language models using an API that makes you smile
  version: 1.0.0
servers:
  - url: https://api.ai21.com/
paths:
  /studio/v1/chat/files/convert:
    post:
      summary: Convert Document File
      operationId: convert_document_file_studio_v1_chat_files_convert_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_convert_document_file_studio_v1_chat_files_convert_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/chat/completions:
    post:
      tags:
        - Jamba Complete
      summary: Chat Complete
      description: "This is the endpoint for the [Jamba Instruct model](https://docs.ai21.com/docs/jamba-models).\nThis is a foundation model that supports both single-turn (question answering,\ntext completion) and multi-turn (chat style) interactions.\n\nYou can optionally stream results if you want to get the response as each\ntoken is generated, rather than waiting for the entire response."
      operationId: v1_chat_complete
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            title: Authorization
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/language_studio_api_server__data_types__chat__ChatRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response V1 Chat Complete
                anyOf:
                  - $ref: '#/components/schemas/ChatCompletion'
                  - type: array
                    items:
                      $ref: '#/components/schemas/ChatCompletionVllmStreamingMessage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/j2-light/complete:
    post:
      tags:
        - completion
      summary: j2-light complete
      operationId: v1_j2_light_complete
      parameters:
        - name: model
          in: query
          schema:
            title: Model
            type: string
            default: j2-light
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/j2-light/{custom_model_name}/complete':
    post:
      tags:
        - completion
      summary: Custom j2-light complete
      operationId: v1_j2_light_custom_model_complete
      parameters:
        - name: custom_model_name
          in: path
          required: true
          schema:
            title: Custom Model Name
            type: string
        - name: custom_model_type
          in: query
          schema:
            title: Custom Model Type
            type: string
            default: j2-light
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/j2-mid/complete:
    post:
      tags:
        - completion
      summary: j2-mid complete
      operationId: v1_j2_mid_complete
      parameters:
        - name: model
          in: query
          schema:
            title: Model
            type: string
            default: j2-mid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/j2-mid/{custom_model_name}/complete':
    post:
      tags:
        - completion
      summary: Custom j2-mid complete
      operationId: v1_j2_mid_custom_model_complete
      parameters:
        - name: custom_model_name
          in: path
          required: true
          schema:
            title: Custom Model Name
            type: string
        - name: custom_model_type
          in: query
          schema:
            title: Custom Model Type
            type: string
            default: j2-mid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/j2-ultra/complete:
    post:
      tags:
        - completion
      summary: j2-ultra complete
      operationId: v1_j2_ultra_complete
      parameters:
        - name: model
          in: query
          schema:
            title: Model
            type: string
            default: j2-ultra
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/j2-ultra/{custom_model_name}/complete':
    post:
      tags:
        - completion
      summary: Custom j2-ultra complete
      operationId: v1_j2_ultra_complete
      parameters:
        - name: custom_model_name
          in: path
          required: true
          schema:
            title: Custom Model Name
            type: string
        - name: custom_model_type
          in: query
          schema:
            title: Custom Model Type
            type: string
            default: j2-ultra
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/j2-large/complete:
    post:
      tags:
        - completion
      summary: j2-large complete
      operationId: v1_j2_large_complete
      parameters:
        - name: model
          in: query
          schema:
            title: Model
            type: string
            default: j2-large
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/j2-large-instruct/complete:
    post:
      tags:
        - completion
      summary: j2-large-instruct complete
      operationId: v1_j2_large_instruct_complete
      parameters:
        - name: model
          in: query
          schema:
            title: Model
            type: string
            default: j2-large-instruct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/j2-grande/complete:
    post:
      tags:
        - completion
      summary: j2-grande complete
      operationId: v1_j2_grande_complete
      parameters:
        - name: model
          in: query
          schema:
            title: Model
            type: string
            default: j2-grande
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/j2-grande-instruct/complete:
    post:
      tags:
        - completion
      summary: j2-grande-instruct complete
      operationId: v1_j2_grande_instruct_complete
      parameters:
        - name: model
          in: query
          schema:
            title: Model
            type: string
            default: j2-grande-instruct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/j2-jumbo/complete:
    post:
      tags:
        - completion
      summary: j2-jumbo complete
      operationId: v1_j2_jumbo_complete
      parameters:
        - name: model
          in: query
          schema:
            title: Model
            type: string
            default: j2-jumbo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/j2-jumbo-instruct/complete:
    post:
      tags:
        - completion
      summary: j2-jumbo-instruct complete
      operationId: v1_j2_jumbo_instruct_complete
      parameters:
        - name: model
          in: query
          schema:
            title: Model
            type: string
            default: j2-jumbo-instruct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/j2-large/{custom_model_name}/complete':
    post:
      tags:
        - completion
      summary: Custom j2-large complete
      operationId: v1_j2_large_custom_model_complete
      parameters:
        - name: custom_model_name
          in: path
          required: true
          schema:
            title: Custom Model Name
            type: string
        - name: custom_model_type
          in: query
          schema:
            title: Custom Model Type
            type: string
            default: j2-large
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/j2-grande/{custom_model_name}/complete':
    post:
      tags:
        - completion
      summary: Custom j2-grande complete
      operationId: v1_j2_grande_custom_model_complete
      parameters:
        - name: custom_model_name
          in: path
          required: true
          schema:
            title: Custom Model Name
            type: string
        - name: custom_model_type
          in: query
          schema:
            title: Custom Model Type
            type: string
            default: j2-grande
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/j2-jumbo/{custom_model_name}/complete':
    post:
      tags:
        - completion
      summary: Custom j2-jumbo complete
      operationId: v1_j2_jumbo_complete
      parameters:
        - name: custom_model_name
          in: path
          required: true
          schema:
            title: Custom Model Name
            type: string
        - name: custom_model_type
          in: query
          schema:
            title: Custom Model Type
            type: string
            default: j2-jumbo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/custom-model:
    get:
      tags:
        - custom-models
      summary: Get Custom Models List
      operationId: v1_get_custom_models
      parameters:
        - name: includeMetadata
          in: query
          schema:
            title: Includemetadata
            type: boolean
            default: false
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - custom-models
      summary: Create Custom Model
      operationId: v1_create_custom_model
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomModelInput'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/custom-model/{custom_model_pid}':
    get:
      tags:
        - custom-models
      summary: Get Custom Model
      operationId: v1_get_custom_model
      parameters:
        - name: custom_model_pid
          in: path
          required: true
          schema:
            title: Custom Model Pid
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - custom-models
      summary: Update Model
      operationId: v1_update_custom_model
      parameters:
        - name: custom_model_pid
          in: path
          required: true
          schema:
            title: Custom Model Pid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomModelUpdateBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/dataset:
    get:
      tags:
        - datasets
      summary: Dataset List
      operationId: v1_get_datasets
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
    post:
      tags:
        - datasets
      summary: Add Dataset
      operationId: v1_upload_dataset
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_v1_upload_dataset'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/dataset/{dataset_pid}':
    get:
      tags:
        - datasets
      summary: Dataset Get
      operationId: v1_get_dataset
      parameters:
        - name: dataset_pid
          in: path
          required: true
          schema:
            title: Dataset Pid
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - datasets
      summary: Delete Dataset
      operationId: v1_delete_dataset
      parameters:
        - name: dataset_pid
          in: path
          required: true
          schema:
            title: Dataset Pid
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/dataset/url/{dataset_pid}':
    get:
      tags:
        - datasets
      summary: Dataset Download Url
      operationId: v1_get_dataset_download_url
      parameters:
        - name: dataset_pid
          in: path
          required: true
          schema:
            title: Dataset Pid
            type: string
        - name: dataset_name
          in: query
          required: true
          schema:
            title: Dataset Name
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/paraphrase:
    post:
      tags:
        - paraphrase
      summary: Paraphrase
      operationId: v1_paraphraze
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParaphraseBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/summarize:
    post:
      tags:
        - summarize
      summary: Summarize
      operationId: v1_summarize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SummarizeBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummarizationResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/summarize-by-segment:
    post:
      tags:
        - summarize
      summary: Segmented Summarize
      operationId: v1_summarize_by_segment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SegmentedSummaryBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummarizeBySegmentResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/segmentation:
    post:
      tags:
        - segmentation
      summary: Segmentation
      operationId: v1_segmentation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SegmentationBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentationResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/embed:
    post:
      summary: Embed
      operationId: v1_embed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingsBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/conversational-rag:
    post:
      summary: Conversational Rag
      operationId: v1_conversational_rag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationalRagFlowPublicFields'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationalRagResult'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/gec:
    post:
      tags:
        - grammatical error corrections
      summary: Grammatical Error Corrections
      operationId: v1_corrections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorrectionsBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorrectionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/library/files:
    get:
      tags:
        - Library management
      summary: Get Organization Files
      description: "Get metadata about a specific file by file ID. The file ID is generated by\nAI21 when you upload the file."
      operationId: v1_library_management
      parameters:
        - name: name
          in: query
          schema:
            title: Name
            type: string
        - name: path
          in: query
          schema:
            title: Path
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FileStatus'
        - name: label
          in: query
          schema:
            title: Label
            type: array
            items:
              type: string
        - name: limit
          in: query
          schema:
            title: Limit
            type: integer
            default: 1000
        - name: offset
          in: query
          schema:
            title: Offset
            type: integer
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response V1 Library Management
                type: array
                items:
                  $ref: '#/components/schemas/FileResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - Library management
      summary: Upload Organization File
      description: "Upload files to use for [RAG Engine document searches](https://docs.ai21.com/docs/rag-engine-overview).\nYou can assign metadata to your files to limit searches to specific files by file metadata.\nThere is no bulk upload method; files must be loaded one at a time.\n\n- **Max number of files:** No limit. The playground limits bulk uploads to 50 files per request.\n- **Max library size:** 1 GB total size. No limit to individual file size.\n- **Supported file types:** PDF, DocX, HTML, TXT"
      operationId: v1_library_upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_v1_library_upload'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/library/files/{file_id}':
    get:
      tags:
        - Library management
      summary: Get File By Id
      description: "Retrieve a list of documents in the user's library. Optionally specify a\nfilter to find only files with matching labels or paths. This method\nreturns only metadata about files; to download a file, call\n`GET .../files/{file_id}/download`\n\nWhen specifying qualifiers with your request, only files that match\n_all_ qualifiers will be returns. So, for example, if you specify\n`label='financial'` and `status='UPLOADED'`, only files with the label\n\"financial\" AND status UPLOADED will be returned."
      operationId: v1_library_management
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            title: File Id
            type: string
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - Library management
      summary: Update File
      description: "Update the specified parameters of a specific document in the user's library.\nThis operation currently supports updating the publicUrl and labels parameters.\n\n> **This operation overwrites the specified items with the new data you provide.**\n> If you wish to add new labels to the labels list without removing the existing ones,\n> you must submit a labels list that includes both the current and new labels.**\n>\n> For instance, if the current labels are \"Label A\" and \"Label B\", and you wish to\n> add \"New Label C\" and \"New Label D\" to the list, you must specify `\"labels\": [\"Label A\", \"Label B\", \"New Label C\", \"New Label D\"]`."
      operationId: v1_library_management
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            title: File Id
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilesUpdateRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - Library management
      summary: Delete File
      description: "Delete the specified file from the library.\n\n**Restrictions**:\nFiles in `PROCESSING` status cannot be deleted. Attempts to delete such files will result in a <span style=\"color:red\">422</span> error."
      operationId: v1_library_delete
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            title: File Id
            type: string
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/library/answer:
    post:
      tags:
        - RAG Engine
      summary: Answer
      operationId: v1_library_answer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryAnswerRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryAnswerResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/library/search:
    post:
      tags:
        - RAG Engine
      summary: Search
      operationId: v1_library_search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibrarySearchRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibrarySearchResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/library/files/{file_id}/download':
    get:
      tags:
        - RAG Engine
      summary: Generate Documents Signed Url
      operationId: v1_library_management
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            title: File Id
            type: string
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response V1 Library Management
                type: string
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/answer:
    post:
      summary: Answer
      operationId: v1_answer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/j2-ultra/chat:
    post:
      tags:
        - chat
      summary: j2-ultra chat
      operationId: v1_j2_ultra_chat
      parameters:
        - name: model
          in: query
          schema:
            title: Model
            type: string
            default: j2-ultra
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/language_studio_api_server__data_types__j2_chat__ChatRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/tokenize:
    post:
      tags:
        - tokenize
      summary: Tokenize
      operationId: v1_tokenize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenizeBody'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    AnswerBody:
      title: AnswerBody
      required:
        - context
        - question
      type: object
      properties:
        context:
          title: Context
          type: string
        question:
          title: Question
          type: string
        answerLength:
          $ref: '#/components/schemas/AnswerLength'
        mode:
          $ref: '#/components/schemas/Mode'
      description: This class is to be used as a common class to all Studio API requests payloads
    AnswerLength:
      title: AnswerLength
      enum:
        - short
        - medium
        - long
      description: An enumeration.
    AssistantMessage:
      title: AssistantMessage
      type: object
      properties:
        role:
          title: Role
          enum:
            - assistant
          type: string
          description: "The role of an individual message.\n- `user`:  Input provided by the user. Any instructions given here that conflict\n  with instructions given in the `system` prompt take precedence over the `system`\n  prompt instructions.\n- `assistant`:  Response generated by the model.\n- `system`:  Initial instructions provided to the system to provide general guidance\n  on the tone and voice of the generated message. An initial system message is\n  optional but recommended to provide guidance on the tone of the chat. For\n  example, \"You are a helpful chatbot with a background in earth sciences and a\n  charming French accent.\"\n"
          default: assistant
        content:
          title: Content
          type: string
        tool_calls:
          title: Tool Calls
          type: array
          items:
            $ref: '#/components/schemas/ToolCall'
    Body_convert_document_file_studio_v1_chat_files_convert_post:
      title: Body_convert_document_file_studio_v1_chat_files_convert_post
      required:
        - files
      type: object
      properties:
        files:
          title: Files
          type: array
          items:
            type: string
            format: binary
    Body_v1_library_upload:
      title: Body_v1_library_upload
      required:
        - file
      type: object
      properties:
        file:
          title: File
          type: string
          format: binary
        path:
          title: Path
          type: string
        labels:
          title: Labels
          type: array
          items:
            type: string
        publicUrl:
          title: Publicurl
          type: string
        custom_configs:
          title: Custom Configs
          type: string
    Body_v1_upload_dataset:
      title: Body_v1_upload_dataset
      required:
        - dataset_file
        - dataset_name
      type: object
      properties:
        dataset_file:
          title: Dataset File
          type: string
          format: binary
        dataset_name:
          title: Dataset Name
          type: string
        selected_columns:
          title: Selected Columns
          type: string
        approve_whitespace_correction:
          title: Approve Whitespace Correction
          type: boolean
        delete_long_rows:
          title: Delete Long Rows
          type: boolean
        split_ratio:
          title: Split Ratio
          type: number
          default: 0.1
    ChatCompletion:
      title: ChatCompletion
      required:
        - id
        - choices
        - usage
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        choices:
          title: Choices
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionResponseChoice'
          description: "One or more responses, depending on the `n` parameter from the request.\n"
        usage:
          $ref: '#/components/schemas/UsageInfo'
        meta:
          title: Meta
          type: object
      description: Used for non-streaming responses. Streaming responses return `ChatCompletionVllmStreamingMessage`.
    ChatCompletionResponseChoice:
      title: ChatCompletionResponseChoice
      required:
        - index
        - message
      type: object
      properties:
        index:
          title: Index
          type: integer
          description: "Zero-based index of the message in the list of messages. Note that this might not\ncorrespond with the position in the response list.\n"
        message:
          $ref: '#/components/schemas/AssistantMessage'
        logprobs:
          $ref: '#/components/schemas/Logprobs'
        finish_reason:
          title: Finish Reason
          type: string
          description: "Why the message ended. Possible reasons:\n  - `stop`: The response ended naturally as a complete answer (due to\n    [end-of-sequence token](https://huggingface.co/docs/transformers/v4.32.1/en/llm_tutorial#generate-text))\n    or because the model generated a stop sequence provided in the request.\n  - `length`:  The response ended by reaching `max_tokens`.\n"
      description: "A single possible response generated by the system. For non-streaming replies, There\ncan be multiple responses, depending on what `n` value you specified in the request.\n"
    ChatCompletionResponseDeltaChoice:
      title: ChatCompletionResponseDeltaChoice
      required:
        - index
        - delta
      type: object
      properties:
        index:
          title: Index
          type: integer
          description: Always zero in streamed responses.
        delta:
          title: Delta
          anyOf:
            - $ref: '#/components/schemas/ChatStreamingFirstDelta'
            - $ref: '#/components/schemas/ChatStreamingContentDelta'
          description: "- **The first message** in the stream will be an object set to `{\"role\":\"assistant\"}`.\n- **Subsequent messages** will have an object `{\"content\": __token__}` with the generated token.\n"
        logprobs:
          $ref: '#/components/schemas/Logprobs'
        finish_reason:
          title: Finish Reason
          type: string
          description: "One of the following string values:\n  - `null`: All messages but the last will return null for `finish_reason`.\n  - `stop`: The response ended naturally as a complete answer (due to\n    [end-of-sequence token](https://huggingface.co/docs/transformers/v4.32.1/en/llm_tutorial#generate-text))\n     or because the model generated a stop sequence provided in the request.\n  - `length`:  The response ended by reaching `max_tokens`.\n"
    ChatCompletionVllmStreamingMessage:
      title: ChatCompletionVllmStreamingMessage
      required:
        - id
        - choices
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        choices:
          title: Choices
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionResponseDeltaChoice'
          description: The message
        usage:
          $ref: '#/components/schemas/UsageInfo'
        meta:
          title: Meta
          type: object
      description: Returned for streaming messages. Non-streaming responses return `ChatCompletion`.
    ChatMessage:
      title: ChatMessage
      required:
        - role
        - text
      type: object
      properties:
        role:
          $ref: '#/components/schemas/RoleType'
        text:
          title: Text
          type: string
    ChatOutput:
      title: ChatOutput
      required:
        - text
        - role
        - finishReason
      type: object
      properties:
        text:
          title: Text
          type: string
        role:
          $ref: '#/components/schemas/RoleType'
        finishReason:
          $ref: '#/components/schemas/FinishReason'
    ChatResponse:
      title: ChatResponse
      required:
        - id
        - outputs
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        outputs:
          title: Outputs
          type: array
          items:
            $ref: '#/components/schemas/ChatOutput'
    ChatStreamingContentDelta:
      title: ChatStreamingContentDelta
      required:
        - content
      type: object
      properties:
        content:
          title: Content
          type: string
    ChatStreamingFirstDelta:
      title: ChatStreamingFirstDelta
      required:
        - role
      type: object
      properties:
        role:
          title: Role
          enum:
            - system
            - user
            - assistant
            - tool
          type: string
          description: "The role of an individual message.\n- `user`:  Input provided by the user. Any instructions given here that conflict\n  with instructions given in the `system` prompt take precedence over the `system`\n  prompt instructions.\n- `assistant`:  Response generated by the model.\n- `system`:  Initial instructions provided to the system to provide general guidance\n  on the tone and voice of the generated message. An initial system message is\n  optional but recommended to provide guidance on the tone of the chat. For\n  example, \"You are a helpful chatbot with a background in earth sciences and a\n  charming French accent.\"\n"
    CompletionBody:
      title: CompletionBody
      required:
        - prompt
      type: object
      properties:
        prompt:
          title: Prompt
          type: string
        numResults:
          title: Numresults
          type: integer
          default: 1
        maxTokens:
          title: Maxtokens
          type: integer
          default: 16
        minTokens:
          title: Mintokens
          type: integer
          default: 0
        temperature:
          title: Temperature
          type: number
          default: 1
        topP:
          title: Topp
          type: number
          default: 1
        minP:
          title: Minp
          type: number
          default: 0
        stopSequences:
          title: Stopsequences
          type: array
          items:
            type: string
        topKReturn:
          title: Topkreturn
          type: integer
          default: 0
        logitBias:
          title: Logitbias
          type: object
        frequencyPenalty:
          title: Frequencypenalty
          allOf:
            - $ref: '#/components/schemas/Penalty'
          default:
            scale: 0
            applyToWhitespaces: true
            applyToPunctuations: true
            applyToNumbers: true
            applyToStopwords: true
            applyToEmojis: true
        presencePenalty:
          title: Presencepenalty
          allOf:
            - $ref: '#/components/schemas/Penalty'
          default:
            scale: 0
            applyToWhitespaces: true
            applyToPunctuations: true
            applyToNumbers: true
            applyToStopwords: true
            applyToEmojis: true
        countPenalty:
          title: Countpenalty
          allOf:
            - $ref: '#/components/schemas/Penalty'
          default:
            scale: 0
            applyToWhitespaces: true
            applyToPunctuations: true
            applyToNumbers: true
            applyToStopwords: true
            applyToEmojis: true
        epoch:
          title: Epoch
          type: integer
    ConversationalRagFlowPublicFields:
      title: ConversationalRagFlowPublicFields
      required:
        - messages
      type: object
      properties:
        messages:
          title: Messages
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: messages
        path:
          title: Path
          type: string
        labels:
          title: Labels
          type: array
          items:
            type: string
        file_ids:
          title: File Ids
          type: array
          items:
            type: string
        max_segments:
          title: Max Segments
          type: integer
          default: 15
        retrieval_strategy:
          title: Retrieval Strategy
          enum:
            - default
            - segments
            - add_neighbors
            - full_doc
          type: string
          default: default
        retrieval_similarity_threshold:
          title: Retrieval Similarity Threshold
          type: number
          default: 0.8
        max_neighbors:
          title: Max Neighbors
          type: integer
        hybrid_search_alpha:
          title: Hybrid Search Alpha
          type: number
          default: 0.98
      description: This class is to be used as a common class to all Studio API requests payloads
    ConversationalRagResult:
      title: ConversationalRagResult
      required:
        - id
        - choices
        - context_retrieved
        - answer_in_context
        - sources
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        choices:
          title: Choices
          type: array
          items:
            $ref: '#/components/schemas/Message'
        search_queries:
          title: Search Queries
          type: array
          items:
            type: string
        context_retrieved:
          title: Context Retrieved
          type: boolean
        answer_in_context:
          title: Answer In Context
          type: boolean
        sources:
          title: Sources
          type: array
          items:
            $ref: '#/components/schemas/ConversationalRagSource'
    ConversationalRagSource:
      title: ConversationalRagSource
      required:
        - text
        - file_id
        - file_name
        - score
      type: object
      properties:
        text:
          title: Text
          type: string
        file_id:
          title: File Id
          type: string
        file_name:
          title: File Name
          type: string
        score:
          title: Score
          type: number
        order:
          title: Order
          type: integer
        public_url:
          title: Public Url
          type: string
        labels:
          title: Labels
          type: array
          items:
            type: string
    Correction:
      title: Correction
      required:
        - suggestion
        - startIndex
        - endIndex
        - originalText
        - correctionType
      type: object
      properties:
        suggestion:
          title: Suggestion
          type: string
        startIndex:
          title: Startindex
          type: integer
        endIndex:
          title: Endindex
          type: integer
        originalText:
          title: Originaltext
          type: string
        correctionType:
          $ref: '#/components/schemas/CorrectionType'
    CorrectionType:
      title: CorrectionType
      enum:
        - Grammar
        - Missing Word
        - Punctuation
        - Spelling
        - Word Repetition
        - Wrong Word
      description: An enumeration.
    CorrectionsBody:
      title: CorrectionsBody
      required:
        - text
      type: object
      properties:
        text:
          title: Text
          type: string
      description: This class is to be used as a common class to all Studio API requests payloads
    CorrectionsResponse:
      title: CorrectionsResponse
      required:
        - id
        - corrections
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        corrections:
          title: Corrections
          type: array
          items:
            $ref: '#/components/schemas/Correction'
    CustomModelInput:
      title: CustomModelInput
      required:
        - model_type
        - dataset_id
        - model_name
      type: object
      properties:
        model_type:
          $ref: '#/components/schemas/CustomModelType'
        learning_rate:
          title: Learning Rate
          type: number
        num_epochs:
          title: Num Epochs
          type: integer
        dataset_id:
          title: Dataset Id
          type: string
        model_name:
          title: Model Name
          type: string
    CustomModelType:
      title: CustomModelType
      enum:
        - j2-large
        - j2-grande
        - j2-jumbo
        - j2-light
        - j2-mid
        - j2-ultra
      description: An enumeration.
    CustomModelUpdateBody:
      title: CustomModelUpdateBody
      type: object
      properties:
        defaultEpoch:
          title: Defaultepoch
          type: integer
    DocumentSchema:
      title: DocumentSchema
      required:
        - content
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        content:
          title: Content
          type: string
        metadata:
          title: Metadata
          type: object
          additionalProperties:
            type: string
    DocumentType:
      title: DocumentType
      enum:
        - URL
        - TEXT
      type: string
      description: An enumeration.
    EmbedType:
      title: EmbedType
      enum:
        - query
        - segment
      type: string
      description: An enumeration.
    EmbeddingsBody:
      title: EmbeddingsBody
      required:
        - texts
      type: object
      properties:
        texts:
          title: Texts
          type: array
          items:
            type: string
        type:
          allOf:
            - $ref: '#/components/schemas/EmbedType'
          default: segment
      description: This class is to be used as a common class to all Studio API requests payloads
    FileDeleteResponse:
      title: FileDeleteResponse
      required:
        - id
        - fileId
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        fileId:
          title: Fileid
          type: string
          description: The RAG library ID of the deleted file.
    FileResponse:
      title: FileResponse
      required:
        - fileId
        - name
        - fileType
        - sizeBytes
        - createdBy
        - creationDate
        - lastUpdated
        - status
      type: object
      properties:
        fileId:
          title: Fileid
          type: string
          description: "The unique identifier of the file, generated by AI21.\n"
          format: uuid
        name:
          title: Name
          type: string
          description: "The name of the file. This is the local file name from when the file was\nuploaded. It cannot be modified.\n"
        path:
          title: Path
          type: string
          description: "An arbitrary file-path-like string to indicate the content of a file. This has\nnothing to do with the location of the file in storage or on disk, and is only\nanother label that you can assign to the file in path-like format to help you\norganize the contents of the file or filter queries against your files. Example\npaths might be `pets/fish` or `pets/dogs`. Then, when searching your library,\nyou can filter files by the full path or path prefix. So to search only files\nin the \"dog folder\", filter by the path `/pets/dogs`. To search all files in\nthe \"pet folder\", filter your search by the path `pets/` when searching by path.\nThere isn't a restriction on whether a path must start or end with a / mark, but\nbe consistent in your usage, and all matches are prefix matching, not substring\nmatching. So filtering by `dog/` matches `dog/` and `dog/setter` but not `pets/dog/`.\n"
        fileType:
          title: Filetype
          type: string
          description: "The file type. See the file upload method to learn what file types are supported.\n"
        sizeBytes:
          title: Sizebytes
          type: integer
          description: 'The size of the file, in bytes.'
        labels:
          title: Labels
          type: array
          items:
            type: string
          description: "Any string labels you have associated with the file. You can apply arbitrary\nstring labels to your files and limit queries to files with one or more labels.\nSimilar to paths, but labels do not prefix match. Labels are case-sensitive.\nThere can be a maximum of 20 unique labels per account.\n"
        publicUrl:
          title: Publicurl
          type: string
          description: "The public URL of the file, if any. This URL is not validated by\nAI21 or used in any way. It is strictly a piece of metadata that you can\noptionally attach to a file.\n"
        createdBy:
          title: Createdby
          type: string
          description: "An internal identifier of the user who uploaded the file.\n"
          format: uuid
        creationDate:
          title: Creationdate
          type: string
          description: The date when the file was uploaded.
          format: date
        lastUpdated:
          title: Lastupdated
          type: string
          description: When the file data or metadata was last changed.
          format: date
        status:
          title: Status
          type: string
          description: "File status. One of the following values: \"DB_RECORD_CREATED\",\n\"UPLOADED\", \"UPLOAD_FAILED\", \"PROCESSED\", \"PROCESSING_FAILED\"\n"
    FileStatus:
      title: FileStatus
      enum:
        - DB_RECORD_CREATED
        - UPLOADED
        - UPLOAD_FAILED
        - PROCESSED
        - PROCESSING_FAILED
      type: string
      description: An enumeration.
    FileUploadResponse:
      title: FileUploadResponse
      required:
        - id
        - fileId
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        fileId:
          title: Fileid
          type: string
          description: "A unique identifier for the uploaded file. Use this later to request, modify metadata,\nor delete the file. You don't need to store the value though, as it is returned\nalong with all file information in any file GET request. Example: da13301a-14e4-4487-aa2f-cc6048e73cdc\n"
    FilesUpdateRequest:
      title: FilesUpdateRequest
      type: object
      properties:
        publicUrl:
          title: Publicurl
          type: string
          description: "The public URL of the file, if any. This URL is not validated by\nAI21 or used in any way. It is strictly a piece of metadata that you can\noptionally attach to a file.\n"
        labels:
          title: Labels
          type: array
          items:
            type: string
          description: "Any labels to associate with this file. Separate multiple labels with commas. If\nprovided, will overwrite all existing labels.\n"
    FinishReason:
      title: FinishReason
      required:
        - reason
      type: object
      properties:
        reason:
          title: Reason
          type: string
        length:
          title: Length
          type: integer
        sequence:
          title: Sequence
          type: string
    FunctionToolDefinition:
      title: FunctionToolDefinition
      required:
        - name
      type: object
      properties:
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
        parameters:
          $ref: '#/components/schemas/ToolParameters'
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    Highlight:
      title: Highlight
      required:
        - text
        - startIndex
        - endIndex
      type: object
      properties:
        text:
          title: Text
          type: string
        startIndex:
          title: Startindex
          type: integer
        endIndex:
          title: Endindex
          type: integer
    LibraryAnswerRequest:
      title: LibraryAnswerRequest
      required:
        - question
      type: object
      properties:
        question:
          title: Question
          type: string
        maxSegments:
          title: Maxsegments
          type: integer
        path:
          title: Path
          type: string
        labels:
          title: Labels
          type: array
          items:
            type: string
        fileIds:
          title: Fileids
          type: array
          items:
            type: string
            format: uuid
        answerLength:
          $ref: '#/components/schemas/AnswerLength'
        mode:
          $ref: '#/components/schemas/Mode'
        retrievalStrategy:
          allOf:
            - $ref: '#/components/schemas/RetrievalStrategy'
          default: default
        retrievalSimilarityThreshold:
          title: Retrievalsimilaritythreshold
          maximum: 1.5
          minimum: 0.5
          type: number
        hybridSearchAlpha:
          title: Hybridsearchalpha
          maximum: 1.0
          minimum: 0.0
          type: number
      description: This class is to be used as a common class to all Studio API requests payloads
    LibraryAnswerResponse:
      title: LibraryAnswerResponse
      required:
        - id
        - answerInContext
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        answerInContext:
          title: Answerincontext
          type: boolean
        answer:
          title: Answer
          type: string
        sources:
          title: Sources
          type: array
          items:
            $ref: '#/components/schemas/SourceDocument'
    LibrarySearchRequest:
      title: LibrarySearchRequest
      required:
        - query
      type: object
      properties:
        query:
          title: Query
          type: string
        maxSegments:
          title: Maxsegments
          type: integer
        path:
          title: Path
          type: string
        labels:
          title: Labels
          type: array
          items:
            type: string
        fileIds:
          title: Fileids
          type: array
          items:
            type: string
            format: uuid
        retrievalStrategy:
          allOf:
            - $ref: '#/components/schemas/RetrievalStrategy'
          default: default
        maxNeighbors:
          title: Maxneighbors
          type: integer
          default: 1
        retrievalSimilarityThreshold:
          title: Retrievalsimilaritythreshold
          maximum: 1.5
          minimum: 0.5
          type: number
        hybridSearchAlpha:
          title: Hybridsearchalpha
          maximum: 1.0
          minimum: 0.0
          type: number
      description: This class is to be used as a common class to all Studio API requests payloads
    LibrarySearchResponse:
      title: LibrarySearchResponse
      required:
        - id
        - results
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        results:
          title: Results
          type: array
          items:
            $ref: '#/components/schemas/LibrarySearchResult'
    LibrarySearchResult:
      title: LibrarySearchResult
      required:
        - text
        - fileId
        - fileName
        - score
      type: object
      properties:
        text:
          title: Text
          type: string
        fileId:
          title: Fileid
          type: string
        fileName:
          title: Filename
          type: string
        score:
          title: Score
          type: number
        order:
          title: Order
          type: integer
        publicUrl:
          title: Publicurl
          type: string
        labels:
          title: Labels
          type: array
          items:
            type: string
    Logprobs:
      title: Logprobs
      required:
        - content
      type: object
      properties:
        content:
          title: Content
          type: array
          items:
            $ref: '#/components/schemas/LogprobsData'
    LogprobsData:
      title: LogprobsData
      required:
        - token
        - logprob
      type: object
      properties:
        token:
          title: Token
          type: string
        logprob:
          title: Logprob
          type: number
        top_logprobs:
          title: Top Logprobs
          type: array
          items:
            $ref: '#/components/schemas/TopLogprobsData'
    Message:
      title: Message
      required:
        - role
        - content
      type: object
      properties:
        role:
          title: Role
          enum:
            - assistant
            - user
          type: string
          description: "The role of an individual message.\n- `user`:  Input provided by the user. Any instructions given here that conflict\n  with instructions given in the `system` prompt take precedence over the `system`\n  prompt instructions.\n- `assistant`:  Response generated by the model.\n- `system`:  Initial instructions provided to the system to provide general guidance\n  on the tone and voice of the generated message. An initial system message is\n  optional but recommended to provide guidance on the tone of the chat. For\n  example, \"You are a helpful chatbot with a background in earth sciences and a\n  charming French accent.\"\n"
        content:
          title: Content
          type: string
    MockResponseConfig:
      title: MockResponseConfig
      type: object
      properties:
        response_delay_seconds:
          title: Response Delay Seconds
          minimum: 0.0
          type: number
          default: 1
        stream_response_delay_between_deltas_seconds:
          title: Stream Response Delay Between Deltas Seconds
          minimum: 0.0
          type: number
          default: 0.1
    Mode:
      title: Mode
      enum:
        - flexible
        - strict
      description: An enumeration.
    ModelName:
      title: ModelName
      enum:
        - jamba-instruct
        - jamba-instruct-preview
        - jamba-next
        - jamba-large-next
        - jamba-large-next-2
        - jamba-1.5-mini
        - jamba-1.5-large
      type: string
      description: An enumeration.
    ParaphraseBody:
      title: ParaphraseBody
      required:
        - text
      type: object
      properties:
        text:
          title: Text
          type: string
        style:
          allOf:
            - $ref: '#/components/schemas/StyleType'
          default: general
        startIndex:
          title: Startindex
          type: integer
          default: 0
        endIndex:
          title: Endindex
          type: integer
      description: This class is to be used as a common class to all Studio API requests payloads
    Penalty:
      title: Penalty
      required:
        - scale
      type: object
      properties:
        scale:
          title: Scale
          type: number
        applyToWhitespaces:
          title: Applytowhitespaces
          type: boolean
          default: true
        applyToPunctuations:
          title: Applytopunctuations
          type: boolean
          default: true
        applyToNumbers:
          title: Applytonumbers
          type: boolean
          default: true
        applyToStopwords:
          title: Applytostopwords
          type: boolean
          default: true
        applyToEmojis:
          title: Applytoemojis
          type: boolean
          default: true
    ResponseFormat:
      title: ResponseFormat
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - text
            - json_object
          type: string
    RetrievalStrategy:
      title: RetrievalStrategy
      enum:
        - default
        - add_neighbors
        - full_doc
      type: string
      description: An enumeration.
    RoleType:
      title: RoleType
      enum:
        - user
        - assistant
      type: string
      description: An enumeration.
    Segment:
      title: Segment
      required:
        - segmentText
        - segmentType
      type: object
      properties:
        segmentText:
          title: Segmenttext
          type: string
        segmentType:
          title: Segmenttype
          type: string
    SegmentSummary:
      title: SegmentSummary
      required:
        - segmentText
        - segmentType
        - hasSummary
        - highlights
      type: object
      properties:
        summary:
          title: Summary
          type: string
        segmentText:
          title: Segmenttext
          type: string
        segmentHtml:
          title: Segmenthtml
          type: string
        segmentType:
          title: Segmenttype
          type: string
        hasSummary:
          title: Hassummary
          type: boolean
        highlights:
          title: Highlights
          type: array
          items:
            $ref: '#/components/schemas/Highlight'
    SegmentationBody:
      title: SegmentationBody
      required:
        - sourceType
        - source
      type: object
      properties:
        sourceType:
          $ref: '#/components/schemas/DocumentType'
        source:
          title: Source
          type: string
      description: This class is to be used as a common class to all Studio API requests payloads
    SegmentationResponse:
      title: SegmentationResponse
      required:
        - id
        - segments
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        segments:
          title: Segments
          type: array
          items:
            $ref: '#/components/schemas/Segment'
    SegmentedSummaryBody:
      title: SegmentedSummaryBody
      required:
        - source
        - sourceType
      type: object
      properties:
        source:
          title: Source
          type: string
        sourceType:
          $ref: '#/components/schemas/DocumentType'
        focus:
          title: Focus
          type: string
      description: This class is to be used as a common class to all Studio API requests payloads
    SourceDocument:
      title: SourceDocument
      required:
        - fileId
        - name
        - highlights
      type: object
      properties:
        fileId:
          title: Fileid
          type: string
        name:
          title: Name
          type: string
        highlights:
          title: Highlights
          type: array
          items:
            type: string
        publicUrl:
          title: Publicurl
          type: string
        labels:
          title: Labels
          type: array
          items:
            type: string
    StyleType:
      title: StyleType
      enum:
        - long
        - short
        - formal
        - casual
        - general
      description: An enumeration.
    SummarizationResponse:
      title: SummarizationResponse
      required:
        - id
        - summary
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        summary:
          title: Summary
          type: string
    SummarizeBody:
      title: SummarizeBody
      required:
        - source
        - sourceType
      type: object
      properties:
        source:
          title: Source
          type: string
        sourceType:
          $ref: '#/components/schemas/DocumentType'
        focus:
          title: Focus
          type: string
        summaryMethod:
          $ref: '#/components/schemas/SummaryMethod'
      description: This class is to be used as a common class to all Studio API requests payloads
    SummarizeBySegmentResponse:
      title: SummarizeBySegmentResponse
      required:
        - id
        - segments
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        segments:
          title: Segments
          type: array
          items:
            $ref: '#/components/schemas/SegmentSummary'
    SummaryMethod:
      title: SummaryMethod
      enum:
        - segments
        - guided
        - fullDocument
      description: An enumeration.
    SystemMessage:
      title: SystemMessage
      required:
        - content
      type: object
      properties:
        role:
          title: Role
          enum:
            - system
          type: string
          description: "The role of an individual message.\n- `user`:  Input provided by the user. Any instructions given here that conflict\n  with instructions given in the `system` prompt take precedence over the `system`\n  prompt instructions.\n- `assistant`:  Response generated by the model.\n- `system`:  Initial instructions provided to the system to provide general guidance\n  on the tone and voice of the generated message. An initial system message is\n  optional but recommended to provide guidance on the tone of the chat. For\n  example, \"You are a helpful chatbot with a background in earth sciences and a\n  charming French accent.\"\n"
          default: system
        content:
          title: Content
          type: string
    TokenizeBody:
      title: TokenizeBody
      required:
        - text
      type: object
      properties:
        text:
          title: Text
          type: string
    ToolCall:
      title: ToolCall
      required:
        - id
        - function
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        type:
          title: Type
          enum:
            - function
          type: string
          default: function
        function:
          $ref: '#/components/schemas/ToolFunction'
    ToolDefinition:
      title: ToolDefinition
      required:
        - type
        - function
      type: object
      properties:
        type:
          title: Type
          enum:
            - function
          type: string
        function:
          $ref: '#/components/schemas/FunctionToolDefinition'
    ToolFunction:
      title: ToolFunction
      required:
        - name
        - arguments
      type: object
      properties:
        name:
          title: Name
          type: string
        arguments:
          title: Arguments
          type: string
    ToolMessage:
      title: ToolMessage
      required:
        - content
        - tool_call_id
      type: object
      properties:
        role:
          title: Role
          enum:
            - tool
          type: string
          description: "The role of an individual message.\n- `user`:  Input provided by the user. Any instructions given here that conflict\n  with instructions given in the `system` prompt take precedence over the `system`\n  prompt instructions.\n- `assistant`:  Response generated by the model.\n- `system`:  Initial instructions provided to the system to provide general guidance\n  on the tone and voice of the generated message. An initial system message is\n  optional but recommended to provide guidance on the tone of the chat. For\n  example, \"You are a helpful chatbot with a background in earth sciences and a\n  charming French accent.\"\n"
          default: tool
        content:
          title: Content
          type: string
        tool_call_id:
          title: Tool Call Id
          type: string
    ToolParameters:
      title: ToolParameters
      required:
        - properties
      type: object
      properties:
        type:
          title: Type
          enum:
            - object
          type: string
          description: 'Type of the parameter schema, only `object` is supported'
          default: object
        properties:
          title: Properties
          type: object
        required:
          title: Required
          type: array
          items:
            type: string
          description: List of required properties
    TopLogprobsData:
      title: TopLogprobsData
      required:
        - token
        - logprob
      type: object
      properties:
        token:
          title: Token
          type: string
        logprob:
          title: Logprob
          type: number
    UsageInfo:
      title: UsageInfo
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      type: object
      properties:
        prompt_tokens:
          title: Prompt Tokens
          type: integer
          description: "Number of tokens in the prompt for this request. Note that the prompt token\nincludes the entire message history, plus extra tokens needed by the system\nwhen combining the list of prompt messages into a single message, as\nrequired by the model. The number of extra tokens is typically proportional\nto the number of messages in the thread, and should be relatively small.\n"
        completion_tokens:
          title: Completion Tokens
          type: integer
          description: Number of tokens in the response message.
        total_tokens:
          title: Total Tokens
          type: integer
          description: "`prompt_tokens` + `completion_tokens`.\n"
    UserMessage:
      title: UserMessage
      required:
        - content
      type: object
      properties:
        role:
          title: Role
          enum:
            - user
          type: string
          description: "The role of an individual message.\n- `user`:  Input provided by the user. Any instructions given here that conflict\n  with instructions given in the `system` prompt take precedence over the `system`\n  prompt instructions.\n- `assistant`:  Response generated by the model.\n- `system`:  Initial instructions provided to the system to provide general guidance\n  on the tone and voice of the generated message. An initial system message is\n  optional but recommended to provide guidance on the tone of the chat. For\n  example, \"You are a helpful chatbot with a background in earth sciences and a\n  charming French accent.\"\n"
          default: user
        content:
          title: Content
          type: string
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
    language_studio_api_server__data_types__chat__ChatRequest:
      title: ChatRequest
      required:
        - model
        - messages
      type: object
      properties:
        model:
          $ref: '#/components/schemas/ModelName'
        messages:
          title: Messages
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/UserMessage'
              - $ref: '#/components/schemas/AssistantMessage'
              - $ref: '#/components/schemas/ToolMessage'
              - $ref: '#/components/schemas/SystemMessage'
            discriminator:
              propertyName: role
              mapping:
                user: '#/components/schemas/UserMessage'
                assistant: '#/components/schemas/AssistantMessage'
                tool: '#/components/schemas/ToolMessage'
                system: '#/components/schemas/SystemMessage'
          description: messages
        tools:
          title: Tools
          type: array
          items:
            $ref: '#/components/schemas/ToolDefinition'
        n:
          title: N
          type: integer
          default: 1
        max_tokens:
          title: Max Tokens
          type: integer
          default: 4096
        temperature:
          title: Temperature
          type: number
        top_p:
          title: Top P
          type: number
          default: 1
        stop:
          title: Stop
          anyOf:
            - type: string
            - type: array
              items:
                type: string
        stream:
          title: Stream
          type: boolean
          description: "Whether or not to stream the result one token at a time using\n[server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events).\nThis can be useful when waiting for long results where a long wait time for an\nanswer can be problematic, such as a chatbot. If set to `True`, then `n` must\nbe 1. A streaming response is different than the non-streaming response.\n"
          default: false
        mock_response:
          $ref: '#/components/schemas/MockResponseConfig'
        documents:
          title: Documents
          type: array
          items:
            $ref: '#/components/schemas/DocumentSchema'
        response_format:
          title: Response Format
          allOf:
            - $ref: '#/components/schemas/ResponseFormat'
          default:
            type: text
    language_studio_api_server__data_types__j2_chat__ChatRequest:
      title: ChatRequest
      required:
        - messages
        - system
      type: object
      properties:
        messages:
          title: Messages
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
          description: messages
        system:
          title: System
          type: string
        frequencyPenalty:
          title: Frequencypenalty
          allOf:
            - $ref: '#/components/schemas/Penalty'
          default:
            scale: 0
            applyToWhitespaces: true
            applyToPunctuations: true
            applyToNumbers: true
            applyToStopwords: true
            applyToEmojis: true
        presencePenalty:
          title: Presencepenalty
          allOf:
            - $ref: '#/components/schemas/Penalty'
          default:
            scale: 0
            applyToWhitespaces: true
            applyToPunctuations: true
            applyToNumbers: true
            applyToStopwords: true
            applyToEmojis: true
        countPenalty:
          title: Countpenalty
          allOf:
            - $ref: '#/components/schemas/Penalty'
          default:
            scale: 0
            applyToWhitespaces: true
            applyToPunctuations: true
            applyToNumbers: true
            applyToStopwords: true
            applyToEmojis: true
        numResults:
          title: Numresults
          type: integer
          default: 1
        temperature:
          title: Temperature
          type: number
          default: 0.7
        maxTokens:
          title: Maxtokens
          type: integer
          default: 300
        minTokens:
          title: Mintokens
          type: integer
          default: 0
        topP:
          title: Topp
          type: number
          default: 1
        topKReturn:
          title: Topkreturn
          type: integer
          default: 0
        stopSequences:
          title: Stopsequences
          type: array
          items:
            type: string
      description: This class is to be used as a common class to all Studio API requests payloads
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
security:
  - Bearer: [ ]