openapi: 3.0.4
info:
  title: AI21 Studio API
  description: Access our powerful language models using an API that makes you smile
  version: 1.0.0
servers:
  - url: https://api.ai21.com/
paths:
  /studio/v1/chat/files/convert:
    post:
      summary: Convert Document File
      operationId: convert_document_file_studio_v1_chat_files_convert_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_convert_document_file_studio_v1_chat_files_convert_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/chat/completions:
    post:
      tags:
        - Jamba Complete
      summary: Studio Chat Complete
      description: "This is the endpoint for the [Jamba Instruct model](https://docs.ai21.com/docs/jamba-models).\nThis is a foundation model that supports both single-turn (question answering,\ntext completion) and multi-turn (chat style) interactions.\n\nYou can optionally stream results if you want to get the response as each\ntoken is generated, rather than waiting for the entire response."
      operationId: v1_chat_complete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response V1 Chat Complete
                anyOf:
                  - $ref: '#/components/schemas/ChatCompletion'
                  - type: array
                    items:
                      $ref: '#/components/schemas/ChatCompletionVllmStreamingMessage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/conversational-rag:
    post:
      summary: Conversational Rag
      operationId: v1_conversational_rag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationalRagConfig'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationalRagResult'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/library/files:
    get:
      tags:
        - Library management
      summary: Get Workspace Files
      description: "Get metadata about a specific file by file ID. The file ID is generated by\nAI21 when you upload the file."
      operationId: v1_library_management
      parameters:
        - name: name
          in: query
          schema:
            title: Name
            type: string
        - name: path
          in: query
          schema:
            title: Path
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/FileStatus'
        - name: label
          in: query
          schema:
            title: Label
            type: array
            items:
              type: string
        - name: limit
          in: query
          schema:
            title: Limit
            type: integer
            default: 10000
        - name: offset
          in: query
          schema:
            title: Offset
            type: integer
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response V1 Library Management
                type: array
                items:
                  $ref: '#/components/schemas/FileResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - Library management
      summary: Upload Workspace File
      description: "Upload files to use for [RAG Engine document searches](https://docs.ai21.com/docs/rag-engine-overview).\nYou can assign metadata to your files to limit searches to specific files by file metadata.\nThere is no bulk upload method; files must be loaded one at a time.\n\n- **Max number of files:** No limit. The playground limits bulk uploads to 50 files per request.\n- **Max library size:** 1 GB total size. No limit to individual file size.\n- **Supported file types:** PDF, DocX, HTML, TXT"
      operationId: v1_library_upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_v1_library_upload'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/library/files/{file_id}':
    get:
      tags:
        - Library management
      summary: Get File By Id
      description: "Retrieve a list of documents in the user's library. Optionally specify a\nfilter to find only files with matching labels or paths. This method\nreturns only metadata about files; to download a file, call\n`GET .../files/{file_id}/download`\n\nWhen specifying qualifiers with your request, only files that match\n_all_ qualifiers will be returns. So, for example, if you specify\n`label='financial'` and `status='UPLOADED'`, only files with the label\n\"financial\" AND status UPLOADED will be returned."
      operationId: v1_library_management
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            title: File Id
            type: string
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - Library management
      summary: Update File
      description: "Update the specified parameters of a specific document in the user's library.\nThis operation currently supports updating the publicUrl and labels parameters.\n\n> **This operation overwrites the specified items with the new data you provide.**\n> If you wish to add new labels to the labels list without removing the existing ones,\n> you must submit a labels list that includes both the current and new labels.**\n>\n> For instance, if the current labels are \"Label A\" and \"Label B\", and you wish to\n> add \"New Label C\" and \"New Label D\" to the list, you must specify `\"labels\": [\"Label A\", \"Label B\", \"New Label C\", \"New Label D\"]`."
      operationId: v1_library_management
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            title: File Id
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilesUpdateRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - Library management
      summary: Delete File
      description: "Delete the specified file from the library.\n\n**Restrictions**:\nFiles in `PROCESSING` status cannot be deleted. Attempts to delete such files will result in a <span style=\"color:red\">422</span> error."
      operationId: v1_library_delete
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            title: File Id
            type: string
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/library/search:
    post:
      tags:
        - RAG Engine
      summary: Search
      operationId: v1_library_search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibrarySearchRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/secrets:
    get:
      tags:
        - Secrets
      summary: Get Secret List
      operationId: v1_secret_storage
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
    post:
      tags:
        - Secrets
      summary: Save Secret
      operationId: v1_secret_storage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecretPayload'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - Secrets
      summary: Delete Secret
      operationId: v1_secret_storage
      parameters:
        - name: secret_id
          in: query
          required: true
          schema:
            title: Secret Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/library/files/{file_id}/download':
    get:
      tags:
        - RAG Engine
      summary: Generate Documents Signed Url
      operationId: v1_library_management
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            title: File Id
            type: string
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response V1 Library Management
                type: string
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/connectors/connected-users/{entity_id}/tokens':
    post:
      summary: Generate Org Token
      operationId: generate_org_token_studio_v1_connectors_connected_users__entity_id__tokens_post
      parameters:
        - name: entity_id
          in: path
          required: true
          schema:
            title: Entity Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorsToken'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/connectors/connected-users/{entity_id}/data-sources':
    get:
      summary: Get Org Data Sources Info
      operationId: get_org_data_sources_info_studio_v1_connectors_connected_users__entity_id__data_sources_get
      parameters:
        - name: entity_id
          in: path
          required: true
          schema:
            title: Entity Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorsDataSources'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/connectors/connected-users/{entity_id}/data-sources/{data_source}/status':
    get:
      summary: Get Data Source Status
      operationId: get_data_source_status_studio_v1_connectors_connected_users__entity_id__data_sources__data_source__status_get
      parameters:
        - name: entity_id
          in: path
          required: true
          schema:
            title: Entity Id
            type: string
        - name: data_source
          in: path
          required: true
          schema:
            title: Data Source
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorsStatus'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/connectors/connected-users/{entity_id}/data-sources/{data_source}/workflows/{workflow_name}/run':
    post:
      summary: Run Workflow
      operationId: run_workflow_studio_v1_connectors_connected_users__entity_id__data_sources__data_source__workflows__workflow_name__run_post
      parameters:
        - name: entity_id
          in: path
          required: true
          schema:
            title: Entity Id
            type: string
        - name: data_source
          in: path
          required: true
          schema:
            title: Data Source
            type: string
        - name: workflow_name
          in: path
          required: true
          schema:
            title: Workflow Name
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/stateless-run:
    post:
      summary: Create Stateless Run
      operationId: create_stateless_run_studio_v1_stateless_run_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStatelessRunsPayload'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatelessRunResult'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/stateless-run/{execution_id}':
    get:
      summary: Get Stateless Run
      operationId: get_stateless_run_studio_v1_stateless_run__execution_id__get
      parameters:
        - name: execution_id
          in: path
          required: true
          schema:
            title: Execution Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatelessRunResult'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/assistants:
    get:
      summary: Get Assistants
      operationId: get_assistants_studio_v1_assistants_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAssistantsResponse'
  '/studio/v1/assistants/{assistant_id}':
    get:
      summary: Get Assistant
      operationId: get_assistant_studio_v1_assistants__assistant_id__get
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema:
            title: Assistant Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assistant'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      summary: Delete Assistant
      operationId: delete_assistant_studio_v1_assistants__assistant_id__delete
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema:
            title: Assistant Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAssistantResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/assistants/{assistant_id}/plans':
    get:
      summary: List Plans
      operationId: list_plans_studio_v1_assistants__assistant_id__plans_get
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema:
            title: Assistant Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPlansResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      summary: Create Plan
      operationId: create_plan_studio_v1_assistants__assistant_id__plans_post
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema:
            title: Assistant Id
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlanPayload'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/assistants/{assistant_id}/plans/{plan_id}':
    get:
      summary: Get Plan
      operationId: get_plan_studio_v1_assistants__assistant_id__plans__plan_id__get
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema:
            title: Assistant Id
            type: string
        - name: plan_id
          in: path
          required: true
          schema:
            title: Plan Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      summary: Modify Plan
      operationId: modify_plan_studio_v1_assistants__assistant_id__plans__plan_id__patch
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema:
            title: Assistant Id
            type: string
        - name: plan_id
          in: path
          required: true
          schema:
            title: Plan Id
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlanPayload'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/assistants/{assistant_id}/routes':
    get:
      summary: Get Routes
      operationId: get_routes_studio_v1_assistants__assistant_id__routes_get
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema:
            title: Assistant Id
            type: string
        - name: name
          in: query
          schema:
            title: Name
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoutesResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      summary: Create Route
      operationId: create_route_studio_v1_assistants__assistant_id__routes_post
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema:
            title: Assistant Id
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoutePayload'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantRoute'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/assistants/{assistant_id}/routes/{route_id}':
    get:
      summary: Get Route
      operationId: get_route_studio_v1_assistants__assistant_id__routes__route_id__get
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema:
            title: Assistant Id
            type: string
        - name: route_id
          in: path
          required: true
          schema:
            title: Route Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantRoute'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      summary: Delete Route
      operationId: delete_route_studio_v1_assistants__assistant_id__routes__route_id__delete
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema:
            title: Assistant Id
            type: string
        - name: route_id
          in: path
          required: true
          schema:
            title: Route Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      summary: Modify Route
      operationId: modify_route_studio_v1_assistants__assistant_id__routes__route_id__patch
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema:
            title: Assistant Id
            type: string
        - name: route_id
          in: path
          required: true
          schema:
            title: Route Id
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoutePayload'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantRoute'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/assistants/{assistant_id}/validate_plan':
    post:
      summary: Validate Plan
      operationId: validate_plan_studio_v1_assistants__assistant_id__validate_plan_post
      parameters:
        - name: assistant_id
          in: path
          required: true
          schema:
            title: Assistant Id
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlanPayload'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /studio/v1/settings/models:
    get:
      summary: Get Workspace Models By Organization Endpoint
      operationId: get_workspace_models_by_organization_endpoint_studio_v1_settings_models_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceModelsResponse'
  /studio/v1/settings/models/available:
    get:
      summary: Get Available Models Endpoint
      operationId: get_available_models_endpoint_studio_v1_settings_models_available_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
  '/studio/v1/settings/models/{name}/secrets':
    get:
      summary: Get Workspace Model Secret Endpoint
      operationId: get_workspace_model_secret_endpoint_studio_v1_settings_models__name__secrets_get
      parameters:
        - name: name
          in: path
          required: true
          schema:
            title: Name
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/studio/v1/settings/models/{name}':
    delete:
      summary: Delete Workspace Model Endpoint
      operationId: delete_workspace_model_endpoint_studio_v1_settings_models__name__delete
      parameters:
        - name: name
          in: path
          required: true
          schema:
            title: Name
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: { }
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    Assistant:
      title: Assistant
      required:
        - id
        - created_at
        - updated_at
        - object
        - name
        - optimization
        - organization_id
        - user_id
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        created_at:
          title: Created At
          type: string
          format: date-time
        updated_at:
          title: Updated At
          type: string
          format: date-time
        object:
          title: Object
          type: string
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
        optimization:
          title: Optimization
          type: string
        organization_id:
          title: Organization Id
          type: string
        user_id:
          title: User Id
          type: string
        avatar:
          title: Avatar
          type: string
        is_archived:
          title: Is Archived
          type: boolean
          default: false
        models:
          title: Models
          anyOf:
            - type: array
              items:
                type: string
                format: uuid
            - type: array
              items:
                type: string
        tools:
          title: Tools
          type: array
          items:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/AssistantTool'
        tool_resources:
          $ref: '#/components/schemas/AssistantToolResource'
    AssistantMessage:
      title: AssistantMessage
      type: object
      properties:
        role:
          title: Role
          enum:
            - assistant
          type: string
          description: "The role of an individual message.\n- `user`:  Input provided by the user. Any instructions given here that conflict\n  with instructions given in the `system` prompt take precedence over the `system`\n  prompt instructions.\n- `assistant`:  Response generated by the model.\n- `system`:  Initial instructions provided to the system to provide general guidance\n  on the tone and voice of the generated message. An initial system message is\n  optional but recommended to provide guidance on the tone of the chat. For\n  example, \"You are a helpful chatbot with a background in earth sciences and a\n  charming French accent.\"\n"
          default: assistant
        content:
          title: Content
          type: string
        tool_calls:
          title: Tool Calls
          type: array
          items:
            $ref: '#/components/schemas/ToolCall'
    AssistantRoute:
      title: AssistantRoute
      required:
        - id
        - created_at
        - updated_at
        - plan_id
        - name
        - description
        - examples
        - assistant_id
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        created_at:
          title: Created At
          type: string
          format: date-time
        updated_at:
          title: Updated At
          type: string
          format: date-time
        plan_id:
          title: Plan Id
          type: string
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
        examples:
          title: Examples
          type: array
          items:
            type: string
        assistant_id:
          title: Assistant Id
          type: string
    AssistantTool:
      title: AssistantTool
      enum:
        - file_search
        - web_search
        - plan_approval
      description: An enumeration.
    AssistantToolResource:
      title: AssistantToolResource
      type: object
      properties:
        file_search:
          title: File Search
          type: object
        web_search:
          title: Web Search
          type: object
        plan_approval:
          title: Plan Approval
          type: object
    Body_convert_document_file_studio_v1_chat_files_convert_post:
      title: Body_convert_document_file_studio_v1_chat_files_convert_post
      required:
        - files
      type: object
      properties:
        files:
          title: Files
          type: array
          items:
            type: string
            format: binary
    Body_v1_library_upload:
      title: Body_v1_library_upload
      required:
        - file
      type: object
      properties:
        file:
          title: File
          type: string
          format: binary
        path:
          title: Path
          type: string
        labels:
          title: Labels
          type: array
          items:
            type: string
        publicUrl:
          title: Publicurl
          type: string
        custom_configs:
          title: Custom Configs
          type: string
    ChatCompletion:
      title: ChatCompletion
      required:
        - id
        - choices
        - usage
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        choices:
          title: Choices
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionResponseChoice'
          description: "One or more responses, depending on the `n` parameter from the request.\n"
        usage:
          $ref: '#/components/schemas/UsageInfo'
        meta:
          title: Meta
          type: object
      description: Used for non-streaming responses. Streaming responses return `ChatCompletionVllmStreamingMessage`.
    ChatCompletionResponseChoice:
      title: ChatCompletionResponseChoice
      required:
        - index
        - message
      type: object
      properties:
        index:
          title: Index
          type: integer
          description: "Zero-based index of the message in the list of messages. Note that this might not\ncorrespond with the position in the response list.\n"
        message:
          $ref: '#/components/schemas/AssistantMessage'
        logprobs:
          $ref: '#/components/schemas/Logprobs'
        finish_reason:
          title: Finish Reason
          type: string
          description: "Why the message ended. Possible reasons:\n  - `stop`: The response ended naturally as a complete answer (due to\n    [end-of-sequence token](https://huggingface.co/docs/transformers/v4.32.1/en/llm_tutorial#generate-text))\n    or because the model generated a stop sequence provided in the request.\n  - `length`:  The response ended by reaching `max_tokens`.\n"
      description: "A single possible response generated by the system. For non-streaming replies, There\ncan be multiple responses, depending on what `n` value you specified in the request.\n"
    ChatCompletionResponseDeltaChoice:
      title: ChatCompletionResponseDeltaChoice
      required:
        - index
        - delta
      type: object
      properties:
        index:
          title: Index
          type: integer
          description: Always zero in streamed responses.
        delta:
          title: Delta
          anyOf:
            - $ref: '#/components/schemas/ChatStreamingFirstDelta'
            - $ref: '#/components/schemas/ChatStreamingContentDelta'
          description: "- **The first message** in the stream will be an object set to `{\"role\":\"assistant\"}`.\n- **Subsequent messages** will have an object `{\"content\": __token__}` with the generated token.\n"
        logprobs:
          $ref: '#/components/schemas/Logprobs'
        finish_reason:
          title: Finish Reason
          type: string
          description: "One of the following string values:\n  - `null`: All messages but the last will return null for `finish_reason`.\n  - `stop`: The response ended naturally as a complete answer (due to\n    [end-of-sequence token](https://huggingface.co/docs/transformers/v4.32.1/en/llm_tutorial#generate-text))\n     or because the model generated a stop sequence provided in the request.\n  - `length`:  The response ended by reaching `max_tokens`.\n"
    ChatCompletionVllmStreamingMessage:
      title: ChatCompletionVllmStreamingMessage
      required:
        - id
        - choices
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        choices:
          title: Choices
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionResponseDeltaChoice'
          description: The message
        usage:
          $ref: '#/components/schemas/UsageInfo'
        meta:
          title: Meta
          type: object
      description: Returned for streaming messages. Non-streaming responses return `ChatCompletion`.
    ChatRequest:
      title: ChatRequest
      required:
        - model
        - messages
      type: object
      properties:
        model:
          $ref: '#/components/schemas/ModelName'
        messages:
          title: Messages
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/UserMessage'
              - $ref: '#/components/schemas/AssistantMessage'
              - $ref: '#/components/schemas/ToolMessage'
              - $ref: '#/components/schemas/SystemMessage'
            discriminator:
              propertyName: role
              mapping:
                user: '#/components/schemas/UserMessage'
                assistant: '#/components/schemas/AssistantMessage'
                tool: '#/components/schemas/ToolMessage'
                system: '#/components/schemas/SystemMessage'
          description: "The previous messages in this chat, from oldest (index 0) to newest. Messages\nmust be alternating `user`/`assistant` messages, optionally starting with a `system`\nmessage. For single turn interactions, this should be an optional `system` message,\nand a single `user` message. Maximum total size for the list is about 256K tokens.\n"
        tools:
          title: Tools
          type: array
          items:
            $ref: '#/components/schemas/ToolDefinition'
        n:
          title: N
          type: integer
          description: "How many chat responses to generate. _Range: 1 – 16_ **Notes:**\n- If `n > 1`, setting `temperature=0` will fail because all answers are guaranteed to be duplicates.\n- `n` must be 1 when `stream = True`\n"
          default: 1
        max_tokens:
          title: Max Tokens
          type: integer
          description: "The maximum number of tokens to allow for each generated response message. Typically\nthe best way to limit output length is by providing a length limit in the system\nprompt (for example, \"limit your answers to three sentences\"). _Range: 0 – 4096_\n"
          default: 4096
        temperature:
          title: Temperature
          type: number
          description: "How much variation to provide in each answer. Setting this value to 0 guarantees the\nsame response to the same question every time. Setting a higher value encourages more\nvariation. Modifies the distribution from which tokens are sampled.\n[More information](https://docs.ai21.com/docs/sampling-from-language-models#temperature)\n_Range: 0.0 – 2.0_\n"
        top_p:
          title: Top P
          maximum: 1.0
          minimum: 0.0
          exclusiveMinimum: true
          type: number
          description: "Limit the pool of next tokens in each step to the top N percentile of possible\ntokens, where 1.0 means the pool of all possible tokens, and 0.01 means the\npool of only the most likely next tokens. [More information]\n(https://docs.ai21.com/docs/sampling-from-language-models#topp) _Range: 0 \\<= value \\<=1.0_\n"
          default: 1
        stop:
          title: Stop
          anyOf:
            - type: string
            - type: array
              items:
                type: string
          description: "End the message when the model generates one of these strings. The stop sequence\nis not included in the generated message. Each sequence can be up to 64K long, and\ncan contain newlines as `\\n` characters. Examples:\n- Single stop string with a word and a period: \"monkeys.\"\n- Multiple stop strings and a newline: [\"cat\", \"dog\", \" .\", \"####\", \"\\n\"]\n"
        stream:
          title: Stream
          type: boolean
          description: "Whether or not to stream the result one token at a time using\n[server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events).\nThis can be useful when waiting for long results where a long wait time for an\nanswer can be problematic, such as a chatbot. If set to `True`, then `n` must\nbe 1. A streaming response is different than the non-streaming response.\n"
          default: false
        mock_response:
          $ref: '#/components/schemas/MockResponseConfig'
        documents:
          title: Documents
          type: array
          items:
            $ref: '#/components/schemas/DocumentSchema'
        response_format:
          title: Response Format
          allOf:
            - $ref: '#/components/schemas/ResponseFormat'
          default:
            type: text
    ChatStreamingContentDelta:
      title: ChatStreamingContentDelta
      required:
        - content
      type: object
      properties:
        content:
          title: Content
          type: string
    ChatStreamingFirstDelta:
      title: ChatStreamingFirstDelta
      required:
        - role
      type: object
      properties:
        role:
          title: Role
          enum:
            - system
            - user
            - assistant
            - tool
          type: string
          description: "The role of an individual message.\n- `user`:  Input provided by the user. Any instructions given here that conflict\n  with instructions given in the `system` prompt take precedence over the `system`\n  prompt instructions.\n- `assistant`:  Response generated by the model.\n- `system`:  Initial instructions provided to the system to provide general guidance\n  on the tone and voice of the generated message. An initial system message is\n  optional but recommended to provide guidance on the tone of the chat. For\n  example, \"You are a helpful chatbot with a background in earth sciences and a\n  charming French accent.\"\n"
    ComparisonOperator:
      title: ComparisonOperator
      type: object
    ConnectorsDataSources:
      title: ConnectorsDataSources
      required:
        - data_sources
      type: object
      properties:
        data_sources:
          title: Data Sources
          type: array
          items:
            $ref: '#/components/schemas/DataSourceMetadata'
    ConnectorsStatus:
      title: ConnectorsStatus
      required:
        - created_at
        - workflow_status
        - files_successfully_uploaded
        - failed_uploaded_files
      type: object
      properties:
        created_at:
          title: Created At
          type: string
        workflow_status:
          $ref: '#/components/schemas/ConnectorsWorkflowStatus'
        files_successfully_uploaded:
          title: Files Successfully Uploaded
          type: integer
        failed_uploaded_files:
          title: Failed Uploaded Files
          type: integer
    ConnectorsToken:
      title: ConnectorsToken
      required:
        - token
      type: object
      properties:
        token:
          title: Token
          type: string
    ConnectorsWorkflowStatus:
      title: ConnectorsWorkflowStatus
      enum:
        - IN_PROGRESS
        - PARTIALLY_COMPLETED
        - FAILED
        - SUCCEEDED
      description: An enumeration.
    Constraint:
      title: Constraint
      required:
        - name
        - description
        - is_mandatory
      type: object
      properties:
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
        is_mandatory:
          title: Is Mandatory
          type: boolean
    ConversationalRagConfig:
      title: ConversationalRagConfig
      required:
        - messages
      type: object
      properties:
        messages:
          title: Messages
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: messages
        path:
          title: Path
          type: string
        labels:
          title: Labels
          type: array
          items:
            type: string
        file_ids:
          title: File Ids
          type: array
          items:
            type: string
        max_segments:
          title: Max Segments
          type: integer
          default: 15
        retrieval_strategy:
          title: Retrieval Strategy
          enum:
            - default
            - segments
            - add_neighbors
            - full_doc
          type: string
          default: segments
        retrieval_similarity_threshold:
          title: Retrieval Similarity Threshold
          type: number
          default: 0
        max_neighbors:
          title: Max Neighbors
          type: integer
          default: 1
        hybrid_search_alpha:
          title: Hybrid Search Alpha
          type: number
          default: 0.98
        response_language:
          title: Response Language
          enum:
            - dutch
            - english
            - french
            - german
            - hebrew
            - italian
            - portuguese
            - spanish
          type: string
          default: english
        verbose:
          title: Verbose
          type: boolean
          default: false
      description: This class is to be used as a common class to all Studio API requests payloads
    ConversationalRagResult:
      title: ConversationalRagResult
      required:
        - id
        - choices
        - context_retrieved
        - answer_in_context
        - sources
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        choices:
          title: Choices
          type: array
          items:
            $ref: '#/components/schemas/Message'
        search_queries:
          title: Search Queries
          type: array
          items:
            type: string
        context_retrieved:
          title: Context Retrieved
          type: boolean
        answer_in_context:
          title: Answer In Context
          type: boolean
        sources:
          title: Sources
          type: array
          items:
            $ref: '#/components/schemas/ConversationalRagSource'
    ConversationalRagSource:
      title: ConversationalRagSource
      required:
        - text
        - file_id
        - file_name
      type: object
      properties:
        text:
          title: Text
          type: string
        file_id:
          title: File Id
          type: string
        file_name:
          title: File Name
          type: string
        score:
          title: Score
          type: number
        order:
          title: Order
          type: integer
        public_url:
          title: Public Url
          type: string
        labels:
          title: Labels
          type: array
          items:
            type: string
    CreatePlanPayload:
      title: CreatePlanPayload
      required:
        - code
      type: object
      properties:
        code:
          title: Code
          type: string
        schemas:
          title: Schemas
          type: array
          items:
            type: object
    CreateRoutePayload:
      title: CreateRoutePayload
      required:
        - plan_id
        - name
        - description
        - examples
      type: object
      properties:
        plan_id:
          title: Plan Id
          type: string
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
        examples:
          title: Examples
          type: array
          items:
            type: string
    CreateSecretPayload:
      title: CreateSecretPayload
      required:
        - secret_name
        - secret_value
      type: object
      properties:
        secret_name:
          title: Secret Name
          type: string
        secret_value:
          title: Secret Value
          type: string
    CreateStatelessRunsPayload:
      title: CreateStatelessRunsPayload
      required:
        - messages
      type: object
      properties:
        messages:
          title: Messages
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: messages
        output_type:
          title: Output Type
          type: object
        models:
          title: Models
          type: array
          items:
            type: string
        tools:
          title: Tools
          type: array
          items:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/AssistantTool'
        tool_resources:
          $ref: '#/components/schemas/AssistantToolResource'
        verbose:
          title: Verbose
          type: boolean
          default: false
        context:
          title: Context
          type: object
        constraints:
          title: Constraints
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
    DataSourceMetadata:
      title: DataSourceMetadata
      required:
        - name
        - type
        - description
        - icon
        - connected
      type: object
      properties:
        name:
          title: Name
          type: string
        type:
          title: Type
          type: string
        description:
          title: Description
          type: string
        icon:
          title: Icon
          type: string
        connected:
          title: Connected
          type: boolean
    DeleteAssistantResponse:
      title: DeleteAssistantResponse
      required:
        - id
      type: object
      properties:
        object:
          title: Object
          type: string
          default: assistant
        deleted:
          title: Deleted
          type: boolean
          default: true
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
    DocumentSchema:
      title: DocumentSchema
      required:
        - content
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        content:
          title: Content
          type: string
        metadata:
          title: Metadata
          type: object
          additionalProperties:
            type: string
    FileResponse:
      title: FileResponse
      required:
        - fileId
        - name
        - fileType
        - sizeBytes
        - createdBy
        - creationDate
        - lastUpdated
        - status
      type: object
      properties:
        fileId:
          title: Fileid
          type: string
          description: "The unique identifier of the file, generated by AI21.\n"
          format: uuid
        name:
          title: Name
          type: string
          description: "The name of the file. This is the local file name from when the file was\nuploaded. It cannot be modified.\n"
        path:
          title: Path
          type: string
          description: "An arbitrary file-path-like string to indicate the content of a file. This has\nnothing to do with the location of the file in storage or on disk, and is only\nanother label that you can assign to the file in path-like format to help you\norganize the contents of the file or filter queries against your files. Example\npaths might be `pets/fish` or `pets/dogs`. Then, when searching your library,\nyou can filter files by the full path or path prefix. So to search only files\nin the \"dog folder\", filter by the path `/pets/dogs`. To search all files in\nthe \"pet folder\", filter your search by the path `pets/` when searching by path.\nThere isn't a restriction on whether a path must start or end with a / mark, but\nbe consistent in your usage, and all matches are prefix matching, not substring\nmatching. So filtering by `dog/` matches `dog/` and `dog/setter` but not `pets/dog/`.\n"
        fileType:
          title: Filetype
          type: string
          description: "The file type. See the file upload method to learn what file types are supported.\n"
        sizeBytes:
          title: Sizebytes
          type: integer
          description: 'The size of the file, in bytes.'
        labels:
          title: Labels
          type: array
          items:
            type: string
          description: "Any string labels you have associated with the file. You can apply arbitrary\nstring labels to your files and limit queries to files with one or more labels.\nSimilar to paths, but labels do not prefix match. Labels are case-sensitive.\nThere can be a maximum of 20 unique labels per account.\n"
        publicUrl:
          title: Publicurl
          type: string
          description: "The public URL of the file, if any. This URL is not validated by\nAI21 or used in any way. It is strictly a piece of metadata that you can\noptionally attach to a file.\n"
        createdBy:
          title: Createdby
          type: string
          description: "An internal identifier of the user who uploaded the file.\n"
          format: uuid
        creationDate:
          title: Creationdate
          type: string
          description: The date when the file was uploaded.
          format: date
        lastUpdated:
          title: Lastupdated
          type: string
          description: When the file data or metadata was last changed.
          format: date
        status:
          title: Status
          type: string
          description: "File status. One of the following values: \"DB_RECORD_CREATED\",\n\"UPLOADED\", \"UPLOAD_FAILED\", \"PROCESSED\", \"PROCESSING_FAILED\"\n"
        dataSource:
          title: Datasource
          type: string
    FileStatus:
      title: FileStatus
      enum:
        - DB_RECORD_CREATED
        - UPLOADED
        - UPLOAD_FAILED
        - PROCESSED
        - PROCESSING_FAILED
      type: string
      description: An enumeration.
    FilesUpdateRequest:
      title: FilesUpdateRequest
      type: object
      properties:
        publicUrl:
          title: Publicurl
          type: string
          description: "The public URL of the file, if any. This URL is not validated by\nAI21 or used in any way. It is strictly a piece of metadata that you can\noptionally attach to a file.\n"
        labels:
          title: Labels
          type: array
          items:
            type: string
          description: "Any labels to associate with this file. Separate multiple labels with commas. If\nprovided, will overwrite all existing labels.\n"
    FunctionToolDefinition:
      title: FunctionToolDefinition
      required:
        - name
      type: object
      properties:
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
        parameters:
          $ref: '#/components/schemas/ToolParameters'
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    LibrarySearchRequest:
      title: LibrarySearchRequest
      required:
        - query
      type: object
      properties:
        query:
          title: Query
          type: string
        maxSegments:
          title: Maxsegments
          type: integer
        path:
          title: Path
          type: string
        labels:
          title: Labels
          type: array
          items:
            type: string
        labels_filter:
          $ref: '#/components/schemas/QueryFilter'
        labels_filter_mode:
          title: Labels Filter Mode
          enum:
            - AND
            - OR
          type: string
          default: AND
        fileIds:
          title: Fileids
          type: array
          items:
            type: string
            format: uuid
        retrievalStrategy:
          allOf:
            - $ref: '#/components/schemas/RetrievalStrategy'
          default: segments
        maxNeighbors:
          title: Maxneighbors
          type: integer
          default: 1
        retrievalSimilarityThreshold:
          title: Retrievalsimilaritythreshold
          maximum: 1.0
          minimum: 0.0
          type: number
        hybridSearchAlpha:
          title: Hybridsearchalpha
          maximum: 1.0
          minimum: 0.0
          type: number
      description: This class is to be used as a common class to all Studio API requests payloads
    ListAssistantsResponse:
      title: ListAssistantsResponse
      required:
        - results
      type: object
      properties:
        results:
          title: Results
          type: array
          items:
            $ref: '#/components/schemas/Assistant'
    ListPlansResponse:
      title: ListPlansResponse
      required:
        - results
      type: object
      properties:
        results:
          title: Results
          type: array
          items:
            $ref: '#/components/schemas/Plan'
    ListRoutesResponse:
      title: ListRoutesResponse
      required:
        - results
      type: object
      properties:
        results:
          title: Results
          type: array
          items:
            $ref: '#/components/schemas/AssistantRoute'
    LogicalOperator:
      title: LogicalOperator
      type: object
      additionalProperties:
        type: array
        items:
          type: object
    Logprobs:
      title: Logprobs
      required:
        - content
      type: object
      properties:
        content:
          title: Content
          type: array
          items:
            $ref: '#/components/schemas/LogprobsData'
    LogprobsData:
      title: LogprobsData
      required:
        - token
        - logprob
      type: object
      properties:
        token:
          title: Token
          type: string
        logprob:
          title: Logprob
          type: number
        top_logprobs:
          title: Top Logprobs
          type: array
          items:
            $ref: '#/components/schemas/TopLogprobsData'
    Message:
      title: Message
      required:
        - role
        - content
      type: object
      properties:
        role:
          title: Role
          enum:
            - assistant
            - user
          type: string
          description: "The role of an individual message.\n- `user`:  Input provided by the user. Any instructions given here that conflict\n  with instructions given in the `system` prompt take precedence over the `system`\n  prompt instructions.\n- `assistant`:  Response generated by the model.\n- `system`:  Initial instructions provided to the system to provide general guidance\n  on the tone and voice of the generated message. An initial system message is\n  optional but recommended to provide guidance on the tone of the chat. For\n  example, \"You are a helpful chatbot with a background in earth sciences and a\n  charming French accent.\"\n"
        content:
          title: Content
          type: string
    MockResponseConfig:
      title: MockResponseConfig
      type: object
      properties:
        response_delay_seconds:
          title: Response Delay Seconds
          minimum: 0.0
          type: number
          default: 1
        stream_response_delay_between_deltas_seconds:
          title: Stream Response Delay Between Deltas Seconds
          minimum: 0.0
          type: number
          default: 0.1
    ModelName:
      title: ModelName
      enum:
        - jamba-instruct
        - jamba-instruct-preview
        - jamba-1.5-mini
        - jamba-1.5-large
        - jamba-mini-1.5
        - jamba-large-1.5
        - jamba-mini
        - jamba-large
        - jamba-mini-1.6
        - jamba-large-1.6
        - jamba-mini-1.6-2025-03
        - jamba-large-1.6-2025-03
      type: string
      description: An enumeration.
    Plan:
      title: Plan
      required:
        - id
        - created_at
        - updated_at
        - code
        - assistant_id
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        created_at:
          title: Created At
          type: string
          format: date-time
        updated_at:
          title: Updated At
          type: string
          format: date-time
        code:
          title: Code
          type: string
        schemas:
          title: Schemas
          type: array
          items:
            type: object
        assistant_id:
          title: Assistant Id
          type: string
    QueryFilter:
      title: QueryFilter
      anyOf:
        - $ref: '#/components/schemas/ComparisonOperator'
        - $ref: '#/components/schemas/LogicalOperator'
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/ComparisonOperator'
    ResponseFormat:
      title: ResponseFormat
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - text
            - json_object
          type: string
    RetrievalStrategy:
      title: RetrievalStrategy
      enum:
        - segments
        - default
        - add_neighbors
        - full_doc
      type: string
      description: An enumeration.
    SecretResponse:
      title: SecretResponse
      required:
        - secret_id
        - secret_key
      type: object
      properties:
        secret_id:
          title: Secret Id
          type: string
        secret_key:
          title: Secret Key
          type: string
    StatelessRunResult:
      title: StatelessRunResult
      required:
        - id
        - status
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
          format: uuid
        status:
          title: Status
          enum:
            - completed
            - failed
            - in_progress
            - requires_action
          type: string
        result:
          title: Result
    SystemMessage:
      title: SystemMessage
      required:
        - content
      type: object
      properties:
        role:
          title: Role
          enum:
            - system
          type: string
          description: "The role of an individual message.\n- `user`:  Input provided by the user. Any instructions given here that conflict\n  with instructions given in the `system` prompt take precedence over the `system`\n  prompt instructions.\n- `assistant`:  Response generated by the model.\n- `system`:  Initial instructions provided to the system to provide general guidance\n  on the tone and voice of the generated message. An initial system message is\n  optional but recommended to provide guidance on the tone of the chat. For\n  example, \"You are a helpful chatbot with a background in earth sciences and a\n  charming French accent.\"\n"
          default: system
        content:
          title: Content
          type: string
    ToolCall:
      title: ToolCall
      required:
        - id
        - function
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "A unique ID for the request (not the message). Repeated identical requests\nget different IDs. However, for a streaming response, the ID will be the same\nfor all responses in the stream.\n"
        type:
          title: Type
          enum:
            - function
          type: string
          default: function
        function:
          $ref: '#/components/schemas/ToolFunction'
    ToolDefinition:
      title: ToolDefinition
      required:
        - type
        - function
      type: object
      properties:
        type:
          title: Type
          enum:
            - function
          type: string
        function:
          $ref: '#/components/schemas/FunctionToolDefinition'
    ToolFunction:
      title: ToolFunction
      required:
        - name
        - arguments
      type: object
      properties:
        name:
          title: Name
          type: string
        arguments:
          title: Arguments
          type: string
    ToolMessage:
      title: ToolMessage
      required:
        - content
        - tool_call_id
      type: object
      properties:
        role:
          title: Role
          enum:
            - tool
          type: string
          description: "The role of an individual message.\n- `user`:  Input provided by the user. Any instructions given here that conflict\n  with instructions given in the `system` prompt take precedence over the `system`\n  prompt instructions.\n- `assistant`:  Response generated by the model.\n- `system`:  Initial instructions provided to the system to provide general guidance\n  on the tone and voice of the generated message. An initial system message is\n  optional but recommended to provide guidance on the tone of the chat. For\n  example, \"You are a helpful chatbot with a background in earth sciences and a\n  charming French accent.\"\n"
          default: tool
        content:
          title: Content
          type: string
        tool_call_id:
          title: Tool Call Id
          type: string
    ToolParameters:
      title: ToolParameters
      required:
        - properties
      type: object
      properties:
        type:
          title: Type
          enum:
            - object
          type: string
          description: 'Type of the parameter schema, only `object` is supported'
          default: object
        properties:
          title: Properties
          type: object
        required:
          title: Required
          type: array
          items:
            type: string
          description: List of required properties
    TopLogprobsData:
      title: TopLogprobsData
      required:
        - token
        - logprob
      type: object
      properties:
        token:
          title: Token
          type: string
        logprob:
          title: Logprob
          type: number
    UpdateRoutePayload:
      title: UpdateRoutePayload
      required:
        - description
      type: object
      properties:
        description:
          title: Description
          type: string
        examples:
          title: Examples
          type: array
          items:
            type: string
    UsageInfo:
      title: UsageInfo
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      type: object
      properties:
        prompt_tokens:
          title: Prompt Tokens
          type: integer
          description: "Number of tokens in the prompt for this request. Note that the prompt token\nincludes the entire message history, plus extra tokens needed by the system\nwhen combining the list of prompt messages into a single message, as\nrequired by the model. The number of extra tokens is typically proportional\nto the number of messages in the thread, and should be relatively small.\n"
        completion_tokens:
          title: Completion Tokens
          type: integer
          description: Number of tokens in the response message.
        total_tokens:
          title: Total Tokens
          type: integer
          description: "`prompt_tokens` + `completion_tokens`.\n"
    UserMessage:
      title: UserMessage
      required:
        - content
      type: object
      properties:
        role:
          title: Role
          enum:
            - user
          type: string
          description: "The role of an individual message.\n- `user`:  Input provided by the user. Any instructions given here that conflict\n  with instructions given in the `system` prompt take precedence over the `system`\n  prompt instructions.\n- `assistant`:  Response generated by the model.\n- `system`:  Initial instructions provided to the system to provide general guidance\n  on the tone and voice of the generated message. An initial system message is\n  optional but recommended to provide guidance on the tone of the chat. For\n  example, \"You are a helpful chatbot with a background in earth sciences and a\n  charming French accent.\"\n"
          default: user
        content:
          title: Content
          type: string
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
    ValidationResult:
      title: ValidationResult
      required:
        - is_valid
      type: object
      properties:
        is_valid:
          title: Is Valid
          type: boolean
        message:
          title: Message
          type: string
        details:
          title: Details
          type: string
    WorkspaceModelResponse:
      title: WorkspaceModelResponse
      required:
        - name
        - model_type
      type: object
      properties:
        name:
          title: Name
          type: string
        model_type:
          title: Model Type
          type: string
        secret_id:
          title: Secret Id
          type: string
        created_by:
          title: Created By
          type: string
        created_at:
          title: Created At
          type: string
          format: date-time
        provider:
          title: Provider
          type: string
        internal:
          title: Internal
          type: boolean
          default: false
    WorkspaceModelsResponse:
      title: WorkspaceModelsResponse
      required:
        - models
      type: object
      properties:
        models:
          title: Models
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceModelResponse'
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
security:
  - Bearer: [ ]